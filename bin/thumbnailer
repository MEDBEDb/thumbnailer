#!/usr/bin/env ruby

#   Thumbnailer - create thumbnails of files.
#   Copyright (C) 2007 Ilmari Heikkinen
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

GC.disable

require 'optparse'
require 'thumbnailer'

options = {:crop => '0x0+0+0'}
opts = OptionParser.new do |opts|
  opts.banner = "USAGE: #{$0} [options] input_filename thumbnail_filename"

  opts.separator ""
  opts.on("-h", "--help", "Show this message"){ puts opts.help; exit!(0) }
  opts.on("-s", "--size SIZE", Integer, "Max dimension of output image"){|p|
    options[:size] = p.to_i
  }
  opts.on("-i", "--input-type TYPE", "Input file mimetype (overrides auto-detect)"){|p|
    options[:input_type] = p
  }
#   opts.on("-o", "--output-type TYPE", "Output image type (overrides filename)"){|p|
#     options[:output_type] = p }
  opts.on("-c", "--crop CROP", "Crop rectangle (WxH+X+Y)"){|p|
    options[:crop] = p
  }
  opts.on("-n", "--no-icon", "Don't use icon fallback."){|p|
    options[:no_icon] = true
  }
  opts.on("-p", "--page PAGENUM", Integer, "Page to thumbnail (time for videos)"){|p|
    options[:page] = (p =~ /\./ ? p.to_f : p.to_i)
  }
  opts.on("--inexisting", "Try thumbnailing even if the file doesn't exist"){
    options[:allow_inexisting] = true
  }
  opts.on("-k", "--keep-temp", "Don't delete temp PDF files"){|p| Thumbnailer.keep_temp = true }
  opts.on("-q", "Don't print error messages"){|p| Thumbnailer.quiet = Metadata.quiet = true }
  opts.on("-v", "Verbose output to stderr"){|p| Thumbnailer.verbose = Metadata.verbose = true }
end


begin
  opts.parse!(ARGV)
rescue => e
  STDERR.puts e.message
  STDERR.puts opts.help
  exit!(1)
end

filenames = ARGV

if filenames.size != 2
  puts opts.banner
  exit!(1)
end

infile, outfile = ARGV[0,2]

if File.exist?(infile) || options[:allow_inexisting]
  if options[:input_type]
    mt = Mimetype[options[:input_type]]
  else
    mt = infile.to_pn.mimetype
  end
  mt.thumbnail(
    infile, outfile, options[:size], options[:page], options[:crop], !options[:no_icon]
  )
else
  STDERR.puts("File does not exist: #{infile}") unless Thumbnailer.quiet
  exit!(2)
end